{"version":3,"sources":["assets/nigel-tadyanehondo-pXf4OH65OhE-unsplash.jpg","firebase/firebase.js","formComponents/MessageInput.js","formComponents/TotalMessages.js","pages/PublicChat.js","formComponents/TextInput.js","pages/LandingPage.js","pages/RoomPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MessageInput","className","onSubmit","this","props","submitStore","htmlFor","autocomplete","id","type","placeholder","value","userInput","onChange","trackChanges","Component","TotalMessages","hidden","sendDate","userID","userMessage","firebaseKey","onClick","cancelMessage","PublicChat","href","goBackToStart","userName","statusChat","handleChange","handleSubmit","messageList","map","messageObject","hideClassName","currentTime","removeMessage","userFirebaseKey","changeHideState","TextInput","autoComplete","inputField","LandingPage","scrollDown","signOrLogin","publicJoin","signUpOrLogin","switchSign","src","landingImage","alt","RoomPage","createRoom","joinRoom","App","componentDidMount","state","setState","e","preventDefault","name","pw","userInput2","signUp","login","users","database","ref","Date","now","toString","userObject","userPW","signUpTime","on","usersCleaned","val","user","stop","setTimeout","alert","userSignedIn","pushID","push","key","child","update","testArray","length","adjustPublicJoinStatus","groupChatStart","window","scrollBy","userNameResponse","randomUserId","Math","floor","random","chatroom","chatroomPush","roomName","messageArray","message","element","document","querySelector","scrollIntoView","event","target","chatrooms","enqueuedMessage","hideClass","hideChat","removeChat","confirm","set","0","remove","clicked","privateJoin","privateCreate","chatroomsCleaned","chatRoomObject","matchOnce","console","log","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,qE,0OCa3CC,IAASC,cAVY,CACjBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECKeS,E,iLAfP,OACI,yBAAKC,UAAU,gBACX,0BAAMC,SAAUC,KAAKC,MAAMC,YAAaJ,UAAU,oBAC9C,2BAAOK,QAAQ,gBACf,2BAAOC,aAAa,MACpBC,GAAG,cAAcC,KAAK,OAAOC,YAAY,eAAeC,MAAOR,KAAKC,MAAMQ,UAAWX,UAAU,cAAcY,SAAUV,KAAKC,MAAMU,eAElI,4BAAQD,SAAUV,KAAKC,MAAMU,aAAcL,KAAK,UAAhD,Y,GAVOM,aCoBZC,E,iLAjBP,OACI,yBAAKf,UAAU,gBAAgBO,GAAIL,KAAKC,MAAMa,QAC1C,6BACI,2BAAG,0BAAMhB,UAAU,QAAQE,KAAKC,MAAMc,WACtC,2BACA,0BAAMjB,UAAU,aAAaE,KAAKC,MAAMe,QADxC,IAGA,0BAAMlB,UAAU,eAAeE,KAAKC,MAAMgB,aAC1C,0BAAMnB,UAAU,YAAYO,GAAIL,KAAKC,MAAMiB,YAAaC,QAASnB,KAAKC,MAAMmB,eAAe,0BAAMtB,UAAWE,KAAKC,MAAMe,OAAQX,GAAIL,KAAKC,MAAMiB,aAAnD,a,GAXnFN,aCwCbS,E,iLApCD,IAAD,OACL,OACI,yBAAKvB,UAAU,SACX,6BACI,6BAASA,UAAU,YACf,6BACI,wBAAIA,UAAU,qBAAd,IAAmC,uBAAGwB,KAAK,cAAR,SAA2B,0BAAMxB,UAAU,UAAhB,OAA9D,KACA,wBAAIqB,QAASnB,KAAKC,MAAMsB,eAAgBvB,KAAKC,MAAMuB,SAAnD,iBAIZ,6BAAS1B,UAAU,WACnB,wCAAcE,KAAKC,MAAMwB,YAEzB,kBAAC,EAAD,CAAchB,UAAWT,KAAKC,MAAMQ,UAAWE,aAAcX,KAAKC,MAAMyB,aAAcxB,YAAaF,KAAKC,MAAM0B,eAC9G,yBAAK7B,UAAU,eACX,6BACKE,KAAKC,MAAM2B,YAAYC,KAAI,SAACC,GACzB,OACJ,kBAAC,EAAD,CAAed,OAAQc,EAAcd,OAAQC,YAAaa,EAAcb,YAAaH,OAAQ,EAAKb,MAAM8B,cAAehB,SAAUe,EAAcE,YAAaZ,cAAe,EAAKnB,MAAMgC,cAAef,YAAaY,EAAcI,qBAKhO,yBAAKpC,UAAU,kBAIvB,4BAAQA,UAAU,QAAQqB,QAASnB,KAAKC,MAAMkC,iBAA9C,qD,GA9BSvB,aCSVwB,E,iLATP,OACI,yBAAKtC,UAAU,cACP,2BAAOK,QAASH,KAAKC,MAAMH,YAC3B,2BAAOuC,aAAa,MAAMhC,GAAIL,KAAKC,MAAMH,UAAWQ,KAAK,OAAOC,YAAaP,KAAKC,MAAMqC,WAAYxC,UAAWE,KAAKC,MAAMH,UAAWY,SAAUV,KAAKC,MAAMyB,oB,GALtJd,a,iBCiDT2B,E,iLA5CP,OACI,yBAAKzC,UAAU,eACV,yBAAKA,UAAU,kBACZ,6BACI,6BAASA,UAAU,YACf,6BACI,wBAAIA,UAAU,qBAAd,IAAmC,uBAAGwB,KAAK,cAAR,UAA+B,uBAAGA,KAAM,6CAA6C,0BAAMxB,UAAU,UAAhB,OAAxH,KACA,wBAAIqB,QAASnB,KAAKC,MAAMuC,YAAaxC,KAAKC,MAAMwC,gBAI5D,6BAAS3C,UAAU,YACnB,qEACI,0BAAMA,UAAU,sBAAsBC,SAAUC,KAAKC,MAAMyC,YACvD,kBAAC,EAAD,CAAWJ,WAAW,6BAA6BxC,UAAU,aAAa4B,aAAc1B,KAAKC,MAAMyB,eACnG,4BAAQpB,KAAK,SAASR,UAAU,gBAAhC,0BAEJ,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,aAAaqB,QAASnB,KAAKC,MAAMuC,YAAnD,2BAIZ,yBAAK1C,UAAU,qBACX,6BAASA,UAAU,YACf,gCAAME,KAAKC,MAAMwC,YAAjB,iDACA,0BAAM3C,UAAU,aAAaC,SAAUC,KAAKC,MAAM0C,eAC9C,6CACA,kBAAC,EAAD,CAAWL,WAAW,OAAOxC,UAAU,aAAa4B,aAAc1B,KAAKC,MAAMyB,eAC7E,kDACA,kBAAC,EAAD,CAAWY,WAAW,aAAaxC,UAAU,kBAAmB4B,aAAc1B,KAAKC,MAAMyB,eACzF,4BAAQpB,KAAK,SAASR,UAAWE,KAAKC,MAAMwC,aAAczC,KAAKC,MAAMwC,cAGzE,4BAAQ3C,UAAU,aAAYqB,QAASnB,KAAKC,MAAM2C,YAAlD,2CACA,yBAAK9C,UAAU,kBACX,yBAAK+C,IAAKC,IAAcC,IAAI,8D,GArC9BnC,aCiCXoC,E,iLAjCP,OACI,yBAAKlD,UAAU,YACX,6BACI,6BAASA,UAAU,YACf,6BACI,wBAAIA,UAAU,qBAAd,IAAmC,uBAAGwB,KAAK,cAAR,SAA2B,0BAAMxB,UAAU,UAAhB,OAA9D,KACA,wBAAIqB,QAASnB,KAAKC,MAAMsB,eAAxB,eAAoDvB,KAAKC,MAAMuB,aAI3E,6BACI,6BAAS1B,UAAU,YACf,kCAAQE,KAAKC,MAAMuB,SAAnB,gEACA,yBAAK1B,UAAU,iBACX,0BAAMA,UAAU,sBAAsBC,SAAUC,KAAKC,MAAMgD,YACvD,sDACA,kBAAC,EAAD,CAAWX,WAAW,wBAAwBxC,UAAU,aAAa4B,aAAc1B,KAAKC,MAAMyB,eAC9F,4BAAQpB,KAAK,SAASR,UAAU,cAAhC,WAEJ,0BAAMA,UAAU,oBAAoBC,SAAUC,KAAKC,MAAMiD,UACrD,0DACA,kBAAC,EAAD,CAAWZ,WAAW,qBAAqBxC,UAAU,WAAW4B,aAAc1B,KAAKC,MAAMyB,eACzF,4BAAQpB,KAAK,SAASR,UAAU,cAAhC,iB,GAxBTc,aC6gBRuC,E,YA/fb,aAAe,IAAD,8BACZ,+CAwBFC,kBAAoB,aAzBN,EAmCdR,WAAY,WACoB,YAA1B,EAAKS,MAAMT,WACb,EAAKU,SAAS,CACZV,WAAY,UAGd,EAAKU,SAAS,CACZV,WAAY,aA1CJ,EA+CdD,cAAgB,SAACY,GACfA,EAAEC,iBAEF,IAAIC,EAAO,EAAKJ,MAAM5C,UAClBiD,EAAK,EAAKL,MAAMM,WACU,YAA1B,EAAKN,MAAMT,WAEb,EAAKgB,OAAOH,EAAMC,GACiB,UAA1B,EAAKL,MAAMT,YACpB,EAAKiB,MAAMJ,EAAMC,IAxDP,EA4DdE,OAAS,SAACH,EAAMC,GAEd,IAAMI,EAAQ1E,EAAS2E,WAAWC,IAAI,SAEhChC,EAAciC,KAAKA,KAAKC,OAAOC,WAI7BC,EAAa,CACjBpD,OAAQyC,EACRY,OAAQX,EACRY,WAAYtC,GAGd8B,EAAMS,GAAG,SAAS,SAACT,GAEjB,IAAIU,EAAeV,EAAMW,MACzB,IAAK,IAAIC,KAAQF,EAEXA,EAAaE,GAAM1D,QAAUyC,GAAQe,EAAaE,GAAML,OAAOF,YAAcT,GAC/E,EAAKJ,SAAS,CACZqB,MAAM,OAMdC,YAAW,WAET,GAAKlB,GAAOD,EAIP,IAAwB,IAApB,EAAKJ,MAAMsB,KAClBE,MAAM,sEACN,EAAKvB,SAAS,CACZqB,MAAM,SAIL,IAAgC,IAA5B,EAAKtB,MAAMyB,aAClBD,MAAM,qCAIH,CACD,IAAME,EAASjB,EAAMkB,KAAKZ,GAC1BA,EAAWlC,gBAAkB6C,EAAOE,IACpCnB,EAAMoB,MAAMH,EAAOE,KAAKE,OAAOf,GAC/B,EAAKd,SAAS,CACZ9B,SAAUiC,EACVY,OAAQX,EACRoB,cAAc,EACdrE,UAAW,UAvBfoE,MAAM,qCA2BP,MArHO,EA0HdhB,MAAQ,SAACJ,EAAMC,IAEmB,IAA5B,EAAKL,MAAMyB,aAMD1F,EAAS2E,WAAWC,IAAI,SAChCO,GAAG,SAAS,SAACT,GAEjB,IAAIU,EAAeV,EAAMW,MACrBW,EAAY,GAChB,IAAK,IAAIV,KAAQF,EAEXA,EAAaE,GAAM1D,SAAWyC,GAAQe,EAAaE,GAAML,OAAOF,aAAeT,IACjF,EAAKJ,SAAS,CACZ9B,SAAUiC,EACVY,OAAQX,EACRoB,cAAc,EACdrE,UAAW,KAEb2E,EAAUJ,KAAK,UAGM,IAArBI,EAAUC,QACZR,MAAM,yDAvBRA,MAAM,6CA7HI,EA4JdS,uBAAyB,SAAC/B,GACxBA,EAAEC,iBAEF,IAAIhC,EAAW,EAAK6B,MAAM5C,UAG1B,EAAK6C,SAAS,CACZZ,YAAY,EACZjC,UAAW,KAGb,EAAK8E,eAAe/D,IAvKR,EA0KdgB,WAAa,SAACe,GACZA,EAAEC,iBACFgC,OAAOC,SAAS,EAAG,MA5KP,EAkLdF,eAAiB,SAAC9B,GAEhB,IAAIiC,EAAmBjC,EAOjBkC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrCJ,GAAsCC,EAOpBvG,EAAS2E,WAAWC,IAAI,aAEhCO,GAAG,SAAS,SAACwB,GACrB,IAEMC,EAFYD,EAAStB,MACP,EAAKpB,MAAM4C,UAG3BC,EAAe,GACnB,IAAK,IAAIC,KAAWH,EAClBE,EAAalB,KAAKgB,EAAaG,IAGjC,EAAK7C,SAAS,CACZ1B,YAAasE,EACb1E,SAAUkE,IAEZ,IAAIU,EAAUC,SAASC,cAAc,gBACrC1B,YAAW,WACTwB,EAAQG,mBACP,SAtNO,EA2Nd7E,aAAe,SAAC8E,GAIiB,eAA3BA,EAAMC,OAAO3G,UACb,EAAKwD,SAAS,CACd7C,UAAW+F,EAAMC,OAAOjG,QAIU,oBAA3BgG,EAAMC,OAAO3G,UACpB,EAAKwD,SAAS,CACZK,WAAY6C,EAAMC,OAAOjG,QAI7B,EAAK8C,SAAS,CACZ7C,UAAW+F,EAAMC,OAAOjG,SA5OhB,EAiPdmB,aAAe,SAAC6E,GACdA,EAAMhD,iBAEN,IAAMkD,EAAYtH,EAAS2E,WAAWC,IAAI,aAEpC2C,EAAkB,EAAKtD,MAAM5C,UAG7BuB,EAAciC,KAAKA,KAAKC,OAAOC,WAG/BrC,EAAgB,CACpBd,OAAQ,EAAKqC,MAAM7B,SACnBP,YAAa0F,EACb3E,YAAaA,EACbE,gBAAiB,IAGnB,GAAIyE,EAAiB,CAEnB,IAAM5B,EAAS2B,EAAUxB,MAAM,EAAK7B,MAAM4C,UAAUjB,KAAKlD,GAEzDA,EAAcI,gBAAkB6C,EAAOE,IACvCyB,EAAUxB,MAAM,EAAK7B,MAAM4C,UAAUf,MAAMH,EAAOE,KAAKE,OAAOrD,GAE9D,EAAKwB,SAAS,CACZ7C,UAAW,GACXuB,YAAa,GACbE,gBAAiB,OA7QT,EAkRdC,gBAAkB,SAACqE,GAEjB,EAAKlD,SAAS,CACZsD,WAAY,EAAKvD,MAAMuD,YAGzB,EAAKC,YAxRO,EA2RdA,SAAW,YAEoB,IAAzB,EAAKxD,MAAMuD,UACb,EAAKtD,SAAS,CACZvB,cAAe,SAKjB,EAAKuB,SAAS,CACZvB,cAAe,MArSP,EA0Sd+E,WAAa,SAACN,GACZ,IAAME,EAAYtH,EAAS2E,WAAWC,IAAI,aACtBwB,OAAOuB,QAAQ,mEAGjCL,EAAUxB,MAAM,EAAK7B,MAAM4C,UAAUe,IAAI,CACvCC,EAAG,CACDjG,OAAQ,aACRC,YAAa,uBAlTP,EA2TdgB,cAAgB,SAACuE,GAEf,IAAME,EAAYtH,EAAS2E,WAAWC,IAAI,aAEtC,EAAKX,MAAM7B,WAAagF,EAAMC,OAAO3G,UAGvC4G,EAAUxB,MAAM,EAAK7B,MAAM4C,UAAUf,MAAMsB,EAAMC,OAAOpG,IAAI6G,SAI5DrC,MAAM,0CAtUI,EA0UdtD,cAAgB,SAACgC,GACfA,EAAEC,iBACF,EAAKF,SAAS,CACZ6D,SAAS,EACTvF,YAAa,GACbnB,UAAW,GACXkD,WAAY,GACZnC,SAAU,MACV6C,OAAQ,GACRuC,WAAW,EACX7E,cAAe,GACfC,YAAa,GACbE,gBAAiB,GACjBQ,YAAY,EACZ0E,aAAa,EACbC,eAAe,EACfzE,WAAY,UACZ+B,MAAM,EACNG,cAAc,EACdmB,SAAU,gBA7VA,EAmWdhD,WAAa,SAACM,GACZA,EAAEC,iBACF,IAAIyC,EAAW,EAAK5C,MAAM5C,UAEpBiG,EAAYtH,EAAS2E,WAAWC,IAAI,aAC1C0C,EAAUnC,GAAG,SAAS,SAACmC,GACrB,IAAIY,EAAmBZ,EAAUjC,MAEjC,IAAK,IAAIsB,KAAYuB,EAEfvB,EAAS5B,YAAc8B,EAAS9B,YAClC,EAAKb,SAAS,CACZqB,MAAM,OAOdC,YAAW,WAEX,GAAiB,KAAbqB,EACFpB,MAAM,gCAID,IAAwB,IAApB,EAAKxB,MAAMsB,KACpBE,MAAM,wDACN,EAAKvB,SAAS,CACZqB,MAAM,QAIL,CAEH,IACM4C,EAAc,eACjBtB,EADiB,eADL,IAGC,CACVjF,OAAQ,aACRC,YAAa,sBAInByF,EAAUvB,OAAOoC,GACjB,EAAKjE,SAAS,CACZ2C,SAAUA,EACVxF,UAAW,GACX4G,eAAe,IAGjB,IAAI5D,EAAO,EAAKJ,MAAM7B,SACtB,EAAK+D,eAAe9B,MAEnB,MAzZS,EA4ZdP,SAAW,SAACK,GACVA,EAAEC,iBAEF,IAAIyC,EAAW,EAAK5C,MAAM5C,UACRrB,EAAS2E,WAAWC,IAAI,aAChCO,GAAG,SAAS,SAACmC,GACrB,IAAIY,EAAmBZ,EAAUjC,MAC7B+C,EAAY,GAChB,IAAK,IAAIzB,KAAYuB,EACfvB,EAAS5B,YAAc8B,EAAS9B,WAClCqD,EAAUxC,KAAK,SAEfyC,QAAQC,IAAIF,GAGhBC,QAAQC,IAAIF,GACRA,EAAUnC,OAAS,EACrB,EAAK/B,SAAS,CACZqB,MAAM,IAGR,EAAKrB,SAAS,CACZqB,MAAM,IAGV8C,QAAQC,IAAIF,MAEd5C,YAAW,WAGT,GAFA6C,QAAQC,IAAI,EAAKrE,MAAMsB,MAEN,KAAbsB,EACFpB,MAAM,gCAIH,IAAwB,IAApB,EAAKxB,MAAMsB,KAAgB,CAKlC,EAAKrB,SAAS,CACZ2C,SAAUA,EACVxF,UAAW,GACX2G,aAAa,IAEf,IAAI3D,EAAO,EAAKJ,MAAM7B,SACtB,EAAK+D,eAAe9B,QAEpBoB,MAAM,+DAOP,MAjdH,EAAKxB,MAAQ,CACX8D,SAAS,EACTvF,YAAa,GACbnB,UAAW,GACXkD,WAAY,GACZnC,SAAU,QACV6C,OAAQ,GACRuC,WAAW,EACX7E,cAAe,GACfC,YAAa,GACbE,gBAAiB,GACjBQ,YAAY,EACZ0E,aAAa,EACbC,eAAe,EACfzE,WAAY,UACZ+B,MAAM,EACNG,cAAc,EACdmB,SAAU,cAnBA,E,sEAwdZ,OACE,yBAAKnG,UAAU,OAERE,KAAKqD,MAAMX,WAEZ,kBAAC,EAAD,CAAYjB,WAAYzB,KAAKqD,MAAM4C,SAAUxF,UAAWT,KAAKqD,MAAM5C,UAAWiB,aAAc1B,KAAK0B,aAAcC,aAAc3B,KAAK2B,aAAcC,YAAa5B,KAAKqD,MAAMzB,YAAaG,cAAe/B,KAAKqD,MAAMtB,cAAeE,cAAejC,KAAKiC,cAAeE,gBAAiBnC,KAAKmC,gBAAiB2E,WAAY9G,KAAK8G,WAAYvF,cAAevB,KAAKuB,gBAGtVvB,KAAKqD,MAAMyB,aAIX9E,KAAKqD,MAAMgE,cAEV,kBAAC,EAAD,CAAY7F,SAAUxB,KAAKqD,MAAM7B,SAAUC,WAAYzB,KAAKqD,MAAM4C,SAAUxF,UAAWT,KAAKqD,MAAM5C,UAAWiB,aAAc1B,KAAK0B,aAAcC,aAAc3B,KAAK2B,aAAcC,YAAa5B,KAAKqD,MAAMzB,YAAaG,cAAe/B,KAAKqD,MAAMtB,cAAeE,cAAejC,KAAKiC,cAAeE,gBAAiBnC,KAAKmC,gBAAiB2E,WAAY9G,KAAK8G,WAAYvF,cAAevB,KAAKuB,gBAEvXvB,KAAKqD,MAAM+D,YAEV,kBAAC,EAAD,CAAY5F,SAAUxB,KAAKqD,MAAM7B,SAAUC,WAAYzB,KAAKqD,MAAM4C,SAAUxF,UAAWT,KAAKqD,MAAM5C,UAAWiB,aAAc1B,KAAK0B,aAAcC,aAAc3B,KAAK2B,aAAcC,YAAa5B,KAAKqD,MAAMzB,YAAaG,cAAe/B,KAAKqD,MAAMtB,cAAeE,cAAejC,KAAKiC,cAAeE,gBAAiBnC,KAAKmC,gBAAiB2E,WAAY9G,KAAK8G,WAAYvF,cAAevB,KAAKuB,gBAE1X,kBAAC,EAAD,CAAUA,cAAevB,KAAKuB,cAAeG,aAAc1B,KAAK0B,aAAcuB,WAAYjD,KAAKiD,WAAYC,SAAUlD,KAAKkD,SAAU1B,SAAUxB,KAAKqD,MAAM7B,WAV3J,kBAAC,EAAD,CAAakB,WAAY1C,KAAKsF,uBAAwB5D,aAAc1B,KAAK0B,aAAciB,cAAe3C,KAAK2C,cAAeC,WAAY5C,KAAK4C,WAAYH,YAAazC,KAAKqD,MAAMT,WAAYJ,WAAYxC,KAAKwC,kB,GAnexM5B,aCJE+G,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01257b21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nigel-tadyanehondo-pXf4OH65OhE-unsplash.a1bc7900.jpg\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyAaI71MTS1gfeFk6RwBoLFf_eTTknSHlkw\",\n    authDomain: \"chat-app-52f62.firebaseapp.com\",\n    databaseURL: \"https://chat-app-52f62.firebaseio.com\",\n    projectId: \"chat-app-52f62\",\n    storageBucket: \"chat-app-52f62.appspot.com\",\n    messagingSenderId: \"762254551362\",\n    appId: \"1:762254551362:web:b3a0fa8d06c325962380db\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React, { Component } from \"react\";\n\nclass MessageInput extends Component {\n    \n    render() {\n        return (\n            <div className=\"messageInput\">\n                <form onSubmit={this.props.submitStore} className='messageInputForm'>\n                    <label htmlFor='userMessage'></label>\n                    <input autocomplete=\"off\"\n                    id='userMessage' type='text' placeholder='Your Message' value={this.props.userInput} className='userMessage' onChange={this.props.trackChanges} />\n                    {/* potentially remove onChange below as its above */}\n                    <button onChange={this.props.trackChanges} type='submit'>Go</button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default MessageInput;\n\n","import React, { Component } from \"react\";\n\nclass TotalMessages extends Component {\n\n    render() {\n        return (\n            <div className=\"totalMessages\" id={this.props.hidden}>\n                <div>\n                    <p><span className='date'>{this.props.sendDate}</span></p>\n                    <p>\n                    <span className='messageID'>{this.props.userID}</span>\n                    :\n                    <span className='messageText'>{this.props.userMessage}</span>\n                    <span className='deleteYou' id={this.props.firebaseKey} onClick={this.props.cancelMessage}><span className={this.props.userID} id={this.props.firebaseKey}>x</span></span>\n                    </p>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default TotalMessages;\n\n","import React, { Component } from \"react\";\nimport MessageInput from '../formComponents/MessageInput';\nimport TotalMessages from '../formComponents/TotalMessages';\n\nclass PublicChat extends Component {\n\n    render() {\n        return (\n            <div className='page2'>\n                <nav>\n                    <section className='wrapper '>\n                        <div>\n                            <li className='logo logo-landing'> <a href=\"index.html\">Chattr<span className='accent'>-3</span></a> </li>\n                            <li onClick={this.props.goBackToStart}>{this.props.userName} sign out </li>\n                        </div>\n                    </section>\n                </nav>\n                <section className='wrapper'>\n                <h2>Channel: {this.props.statusChat}</h2>\n\n                <MessageInput userInput={this.props.userInput} trackChanges={this.props.handleChange} submitStore={this.props.handleSubmit} />\n                <div className='messagesBox'>\n                    <div>\n                        {this.props.messageList.map((messageObject) => {\n                            return (\n                        <TotalMessages userID={messageObject.userID} userMessage={messageObject.userMessage} hidden={this.props.hideClassName} sendDate={messageObject.currentTime} cancelMessage={this.props.removeMessage} firebaseKey={messageObject.userFirebaseKey} />\n                            )\n                        }\n                        )}\n                        {/* empty div so we can scroll to the newest message on message send */}\n                        <div className='lastMessage'></div>\n\n                    </div>\n                </div>\n                <button className=\"clear\" onClick={this.props.changeHideState}>Be Private - Hide & UnHide chat just for me</button>\n                {/* <button className=\"clear\" onClick={this.props.removeChat}>Remove Chat Permanently for everyone </button> */}\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default PublicChat;\n","import React, { Component } from \"react\";\n\nclass TextInput extends Component {\n    render() {\n        return (\n            <div className='signInForm'>\n                    <label htmlFor={this.props.className}></label>\n                    <input autoComplete=\"off\" id={this.props.className} type='text' placeholder={this.props.inputField} className={this.props.className} onChange={this.props.handleChange} />\n            </div>\n            )\n    }\n}\n\nexport default TextInput;\n\n\n","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\nimport landingImage from '../assets/nigel-tadyanehondo-pXf4OH65OhE-unsplash.jpg' // relative path to image \n\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div className='landingPage'>\n                 <div className='landingPageTop'>      \n                    <nav>\n                        <section className='wrapper '>\n                            <div>\n                                <li className='logo logo-landing'> <a href=\"index.html\">Chattr</a><a href={'https://tomstuart123.github.io/chat-test/'}><span className='accent'>-3</span></a> </li>\n                                <li onClick={this.props.scrollDown}>{this.props.signOrLogin}</li>\n                            </div>\n                        </section>\n                    </nav>\n                    <section className='wrapper '>\n                    <h1> Virtual Chat for work, chill or play</h1>\n                        <form className='publicRoomInputForm' onSubmit={this.props.publicJoin}>\n                            <TextInput inputField='Add name to trial as guest' className='publicJoin' handleChange={this.props.handleChange}/>\n                            <button type='submit' className='submitPublic'>Go to the Public Room</button>\n                        </form>\n                        <div className='scrollDownHolder'>\n                            <button className='scrollDown' onClick={this.props.scrollDown}>Sign up to Pro below</button>\n                        </div>\n                    </section>\n                </div>\n                <div className='landingPageBottom'> \n                    <section className='wrapper '>\n                        <h2> {this.props.signOrLogin} to create and join your own private channels</h2> \n                        <form className='signInForm' onSubmit={this.props.signUpOrLogin}>\n                            <p>Add a UserName</p>\n                            <TextInput inputField='Name' className='signInName' handleChange={this.props.handleChange}/>\n                            <p>Add your Random Key</p>\n                            <TextInput inputField='Random key' className='signInRandomKey'  handleChange={this.props.handleChange}/>\n                            <button type='submit' className={this.props.signOrLogin}>{this.props.signOrLogin}</button>\n                        \n                        </form>\n                        <button className='switchSign'onClick={this.props.switchSign}>Already done this? Switch to Login page</button>\n                        <div className='imageContainer'>\n                            <img src={landingImage} alt='sign saying how th e user will sign up eventually'></img>\n                        </div>\n                    </section>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\n\nclass RoomPage extends Component {\n    render() {\n        return (\n            <div className='roomPage'>\n                <nav>\n                    <section className='wrapper '>\n                        <div>\n                            <li className='logo logo-landing'> <a href=\"index.html\">Chattr<span className='accent'>-3</span></a> </li>\n                            <li onClick={this.props.goBackToStart}>Sign Out of {this.props.userName}</li>\n                        </div>\n                    </section>\n                </nav>\n                <div>\n                    <section className='wrapper '>\n                        <h1>Hi {this.props.userName}! You're all signed in so lets get your private room set up!</h1>\n                        <div className='roomPageForms'> \n                            <form className='createRoomInputForm' onSubmit={this.props.createRoom}>\n                                <h3>Create a new chat room</h3>\n                                <TextInput inputField='Name for the new room' className='createRoom' handleChange={this.props.handleChange} />\n                                <button type='submit' className='submitRoom'>Create</button>\n                            </form>\n                            <form className='joinRoomInputForm' onSubmit={this.props.joinRoom}>\n                                <h3>Join an existing chat room</h3>\n                                <TextInput inputField='Existing room name' className='joinRoom' handleChange={this.props.handleChange} />\n                                <button type='submit' className='submitJoin'>Join</button>\n                            </form>\n                        </div>\n                    </section>\n                </div> \n            </div>\n            \n        )\n    }\n}\n\nexport default RoomPage;","import React, { Component } from \"react\";\nimport './App.css';\nimport firebase from './firebase/firebase';\nimport PublicChat from './pages/PublicChat';\nimport LandingPage from './pages/LandingPage';\nimport RoomPage from './pages/RoomPage';\n\n\n// TOD\n  // make sure sign in and account persists on page refresh\n  // Re-look at public chat styling\n  // fix scroll to message bug\n  // fix bug - currently you can sign in occasionally as existing users\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'guest',\n      userPW: '',\n      hideClass: true,\n      hideClassName: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      privateCreate: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n      roomName: 'publicRoom', \n    }\n\n  \n  }\n\n  componentDidMount = () => {\n    // if (this.state.publicJoin === true) {\n      // this.groupChatStart();\n    // } else {\n    //   return\n    // }\n  }\n\n  // LANDING PAGE FUNCTIONALITY\n\n  switchSign= () => {\n    if (this.state.switchSign === 'Sign up') {\n      this.setState({\n        switchSign: 'Login',\n      })\n    } else {\n      this.setState({\n        switchSign: 'Sign up',\n      })\n    }\n  }\n  \n  signUpOrLogin = (e) => {\n    e.preventDefault();\n    \n    let name = this.state.userInput;\n    let pw = this.state.userInput2;\n    if (this.state.switchSign === 'Sign up') {\n      \n      this.signUp(name, pw)\n    } else if (this.state.switchSign === 'Login') {\n      this.login(name, pw)\n    }      \n  }\n\n  signUp = (name, pw) => {  \n    // pull users area of firebase\n    const users = firebase.database().ref('users');\n    // pull current time \n    const currentTime = Date(Date.now()).toString();\n    // hack needed a setTimeout to deliver the non-default states\n  \n      // create object with details of sign up\n      const userObject = {\n        userID: name,\n        userPW: pw,\n        signUpTime: currentTime,\n      }\n      // check if someone already has both these userID / password\n      users.on('value', (users) => {\n        \n        let usersCleaned = users.val();\n        for (let user in usersCleaned) {\n          \n          if (usersCleaned[user].userID == name && usersCleaned[user].userPW.toString() == pw) {\n            this.setState({\n              stop: true,\n            })\n          }  \n        }\n      })\n      \n      setTimeout(() => { \n        // only run if user has input both text fields\n        if (!pw || !name) {\n          alert('please fill both sign in fields')\n        } \n        // only run it if the stop status set above is set to false\n        else if (this.state.stop === true) {\n          alert('sorry someone already has that key with that user name. Try again.')\n          this.setState({\n            stop: false,\n          })\n        } \n        // error if already signed in \n        else if (this.state.userSignedIn === true) {\n          alert('Already signed in I am afraid')\n        } \n        \n        // push user to database if the two conditionals above are false\n        else {\n            const pushID = users.push(userObject);\n            userObject.userFirebaseKey = pushID.key;\n            users.child(pushID.key).update(userObject);\n            this.setState({\n              userName: name,\n              userPW: pw,\n              userSignedIn: true,\n              userInput: '',\n\n            })\n        }\n      }, 300);\n   \n    \n  } \n\n  login = (name, pw) => {\n    // if already signed in, highlight to user\n    if (this.state.userSignedIn === true) {\n      alert('Already signed in. sign out when you can')\n      return\n    }\n\n    // check login details vs. database\n    const users = firebase.database().ref('users');\n    users.on('value', (users) => {\n\n      let usersCleaned = users.val();\n      let testArray = []\n      for (let user in usersCleaned) {\n\n        if (usersCleaned[user].userID === name && usersCleaned[user].userPW.toString() === pw) {\n          this.setState({\n            userName: name,\n            userPW: pw,\n            userSignedIn: true,\n            userInput: '',\n          })\n          testArray.push('match')\n        } \n      } \n      if (testArray.length === 0) {\n        alert('sorry, no username and ID matches those. Try again')\n      }\n\n    })\n    \n    // if login match, run get started function below\n  }\n\n  adjustPublicJoinStatus = (e) => {\n    e.preventDefault();\n    // already stored their input in userInput for storage on this submit\n    let userName = this.state.userInput;\n\n    // set state to true\n    this.setState({\n      publicJoin: true,\n      userInput: '',\n    })\n    // public app start\n    this.groupChatStart(userName);\n  }\n\n  scrollDown = (e) => {\n    e.preventDefault();\n    window.scrollBy(0, 1000);\n  }\n\n\n  // MAIN PUBLIC / PRIVATE CHAT FUNCTIONALITY & \n\n  groupChatStart = (name) => {\n    // ask for user name and store in variable\n    let userNameResponse = name;\n    // if user doesn't give a name, make them\n    // if (userNameResponse === '') {\n    //   userNameResponse = prompt('try again, what is your name?')\n    // }\n\n    //add to the name given by a user a random generated number to ensure people are different\n    const randomUserId = Math.floor(Math.random() * 100);\n    userNameResponse = userNameResponse + randomUserId;\n    // console.log(userNameResponse)\n\n    // if roomName = publiRoom (i.e. the public guest chat), add guest to their name, ID and \n   \n\n    // pull firebase\n    const chatrooms = firebase.database().ref('chatrooms');\n    // always listen to firebase database chatrooms. On changes to database, update state\n    chatrooms.on('value', (chatroom) => {\n      const chatrooms = chatroom.val();\n      const currentRoom = this.state.roomName;\n      const chatroomPush = chatrooms[currentRoom];\n      \n      let messageArray = [];\n      for (let message in chatroomPush) {\n        messageArray.push(chatroomPush[message])\n      }\n      // when chatroom changes, push the entire chatroom message to state\n      this.setState({\n        messageList: messageArray,\n        userName: userNameResponse,\n      })\n      let element = document.querySelector('.lastMessage');\n      setTimeout(function () {\n        element.scrollIntoView();\n      }, 100);\n    })\n  }\n\n  // GENERAL TEXT INPUT FUNCTIONS\n  handleChange = (event) => {\n    // when input text box changes, update state of the userInput dynamically\n\n    // if its the signIn part, update userInput one for usage\n    if (event.target.className === 'signInName') {\n        this.setState({\n        userInput: event.target.value\n        })\n    // if its the key part, update userInput one for usage\n\n    } else if (event.target.className === 'signInRandomKey') {\n        this.setState({\n          userInput2: event.target.value\n        })\n    }   // if its anything else, update userInput one for usage\n    else {\n      this.setState({\n        userInput: event.target.value\n      })\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // set firebase object of chatroom\n    const chatrooms = firebase.database().ref('chatrooms');\n    // pull username and message \n    const enqueuedMessage = this.state.userInput;\n\n    // find latest time / date\n    const currentTime = Date(Date.now()).toString();\n\n    \n    const messageObject = {\n      userID: this.state.userName,\n      userMessage: enqueuedMessage,\n      currentTime: currentTime,\n      userFirebaseKey: '',\n    }\n    // push message object to firebase in the 'current' room with chatroom1 as the default if message isn't empty\n    if (enqueuedMessage) {\n      // store the pushID given to us from firebase\n      const pushID = chatrooms.child(this.state.roomName).push(messageObject);\n      // update the firebase key with variable pushID\n      messageObject.userFirebaseKey = pushID.key;\n      chatrooms.child(this.state.roomName).child(pushID.key).update(messageObject);\n\n      this.setState({\n        userInput: '',\n        currentTime: '',\n        userFirebaseKey: '',\n      })\n    }\n  }\n\n  changeHideState = (event) => {\n    // if hide button clicked, change hideClass to true\n    this.setState({\n      hideClass: !this.state.hideClass,\n    })\n    //run hidechat\n    this.hideChat();\n  }\n\n  hideChat = () => {\n    // if user has clicked the button and hideClass state is true, then add the hideClassName to all the li messages \n    if (this.state.hideClass === true) {\n      this.setState({\n        hideClassName: 'hide',\n      })\n    } \n    // else, remove hideClass name from all li messages \n    else {\n      this.setState({\n        hideClassName: '',\n      })\n    }\n  }\n\n  removeChat = (event) => {\n    const chatrooms = firebase.database().ref('chatrooms');\n    const userCertain = window.confirm('Are you sure you want to delete the chat for all participants?')\n\n    if (userCertain) {\n      chatrooms.child(this.state.roomName).set({\n        0: {\n          userID: \"Chattr Bot\",\n          userMessage: \"Start chat below\"\n        }\n      });\n    } else {\n      return\n    }\n\n  }\n\n  removeMessage = (event) => {\n    // pull the firebase chatroom necessary\n    const chatrooms = firebase.database().ref('chatrooms');\n    // compare current username vs. username held in class on the event clicked on (see total messages span)\n    if (this.state.userName === event.target.className) \n    // if they are the same, then go into database and find the clicked on message's firebase key. In this firebase key area of your database, delete it\n    {\n      chatrooms.child(this.state.roomName).child(event.target.id).remove();  \n    } \n    // else alert the user that they can't delete other people's messages\n    else {\n      alert(`You can only delete your own messages`)\n    }\n  }\n\n  goBackToStart = (e) => {\n    e.preventDefault();\n    this.setState({\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'Tom',\n      userPW: '',\n      hideClass: true,\n      hideClassName: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      privateCreate: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n      roomName: 'publicRoom', \n    })\n  }\n\n    // 3rd PAGE (PUBLIC CHAT) FUNCTIONALITY\n  \n  createRoom = (e) => {\n    e.preventDefault();\n    let roomName = this.state.userInput;\n\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n      \n      for (let chatroom in chatroomsCleaned) {\n\n        if (chatroom.toString() == roomName.toString()) {\n          this.setState({\n            stop: true,\n          })\n        }\n      }\n\n    })\n\n    setTimeout(() => { \n    // only run if user has input both text fields\n    if (roomName === '') {\n      alert('please fill a room name')\n    } \n    // update the roomName to userInput if exists\n    // only run it if the stop status set above is set to false\n      else if (this.state.stop === true) {\n      alert('sorry someone already has that room name. Try again.')\n      this.setState({\n        stop: false,\n      })\n    }\n    \n    else {\n      // remove push as not as clean a database\n      let template = '0';\n      const chatRoomObject = {\n        [roomName]: {\n          [template]: {\n            userID: \"Chattr Bot\",\n            userMessage: \"Start chat below\",\n          }\n        }\n      }\n      chatrooms.update(chatRoomObject);\n      this.setState({\n        roomName: roomName,\n        userInput: '',\n        privateCreate: true,\n      })\n      // run append to page function that takes name as the only parameter\n      let name = this.state.userName;\n      this.groupChatStart(name);\n    }\n    }, 300);\n  }\n\n  joinRoom = (e) => {\n    e.preventDefault();\n\n    let roomName = this.state.userInput;\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n      let matchOnce = [];\n      for (let chatroom in chatroomsCleaned) {\n        if (chatroom.toString() == roomName.toString()) {\n          matchOnce.push('match')\n        } else {\n          console.log(matchOnce)\n        }\n      }\n      console.log(matchOnce)\n      if (matchOnce.length > 0) {\n        this.setState({\n          stop: false,\n        })\n      } else {\n        this.setState({\n          stop: true,\n        })\n      }\n      console.log(matchOnce)\n    })\n    setTimeout(() => {\n      console.log(this.state.stop)\n      // only run if user has input both text fields\n      if (roomName === '') {\n        alert('please fill a room name')\n      }\n      // update the roomName to userInput if exists\n      // only run it if the stop status set above is set to false\n      else if (this.state.stop === false) {\n        // alert('sorry there are no room names with that title. Try again.')\n        // this.setState({\n        //   stop: false,\n        // })\n        this.setState({\n          roomName: roomName,\n          userInput: '',\n          privateJoin: true,\n        })\n        let name = this.state.userName\n        this.groupChatStart(name);\n      } else {\n        alert('sorry there are no room names with that title. Try again.')\n        \n      }\n\n      // else {\n      //   // remove push as not as clean a database\n      // }\n    }, 500);\n\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n          {\n             this.state.publicJoin \n             ? \n            <PublicChat statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart}/>\n           \n             : \n             (!this.state.userSignedIn \n              ? \n              <LandingPage publicJoin={this.adjustPublicJoinStatus} handleChange={this.handleChange} signUpOrLogin={this.signUpOrLogin} switchSign={this.switchSign} signOrLogin={this.state.switchSign} scrollDown={this.scrollDown}/>\n              :\n              (this.state.privateCreate\n                ?\n                <PublicChat userName={this.state.userName} statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart} />\n                :\n                (this.state.privateJoin\n                  ?\n                  <PublicChat userName={this.state.userName} statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart} />\n                  :\n                <RoomPage goBackToStart={this.goBackToStart} handleChange={this.handleChange} createRoom={this.createRoom} joinRoom={this.joinRoom} userName={this.state.userName}/>\n                )\n              \n              \n              )\n             )\n          }      \n        {/* {\n          // THREE.JS STRETCH\n          this.state.clicked \n              ? <ThreeContainer />\n              : null\n        } */}\n      </div>\n\n    )\n  }\n  }\n\nexport default App;\n\n\n// THREE JS STRETCH\n// combined three js with react by following this guide - https://blog.bitsrc.io/starting-with-react-16-and-three-js-in-5-minutes-3079b8829817\n\n// split three.js into multiple files with guide - https://medium.com/javascript-in-plain-english/javascript-in-3d-an-introduction-to-three-js-780f1e4a2e6d\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}