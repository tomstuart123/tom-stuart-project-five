{"version":3,"sources":["firebase/firebase.js","formComponents/MessageInput.js","formComponents/TotalMessages.js","pages/PublicChat.js","formComponents/TextInput.js","pages/LandingPage.js","pages/RoomPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MessageInput","className","onSubmit","this","props","submitStore","htmlFor","id","type","placeholder","value","userInput","onChange","trackChanges","Component","TotalMessages","hidden","sendDate","userID","userMessage","firebaseKey","onClick","cancelMessage","PublicChat","statusChat","handleChange","handleSubmit","messageList","map","messageObject","hideClassName","currentTime","removeMessage","userFirebaseKey","changeHideState","removeChat","goBackToStart","TextInput","inputField","LandingPage","publicJoin","signOrLogin","switchSign","signUpOrLogin","RoomPage","userName","createRoom","joinRoom","App","state","setState","e","preventDefault","name","pw","userInput2","signUp","login","users","database","ref","Date","now","toString","userObject","userPW","signUpTime","on","usersCleaned","val","user","stop","setTimeout","alert","userSignedIn","pushID","push","key","child","update","testArray","length","adjustPublicJoinStatus","groupChatStart","userNameResponse","randomUserId","Math","floor","random","addGuest","chatroom","chatroomPush","roomName","messageArray","message","element","document","querySelector","scrollIntoView","console","log","event","target","chatrooms","enqueuedMessage","hideClass","hideChat","window","confirm","set","0","remove","clicked","privateJoin","chatroomsCleaned","chatRoomObject","privateCreate","matchOnce","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e101776.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyAaI71MTS1gfeFk6RwBoLFf_eTTknSHlkw\",\n    authDomain: \"chat-app-52f62.firebaseapp.com\",\n    databaseURL: \"https://chat-app-52f62.firebaseio.com\",\n    projectId: \"chat-app-52f62\",\n    storageBucket: \"chat-app-52f62.appspot.com\",\n    messagingSenderId: \"762254551362\",\n    appId: \"1:762254551362:web:b3a0fa8d06c325962380db\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase\n","import React, { Component } from \"react\";\n\nclass MessageInput extends Component {\n    \n    render() {\n        return (\n            <div className=\"messageInput\">\n                <form onSubmit={this.props.submitStore} className='messageInputForm'>\n                    <label htmlFor='userMessage'></label>\n                    <input id='userMessage' type='text' placeholder='Your Message' value={this.props.userInput} className='userMessage' onChange={this.props.trackChanges} />\n                    {/* potentially remove onChange below as its above */}\n                    <button onChange={this.props.trackChanges} type='submit'>Go</button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default MessageInput;\n\n","import React, { Component } from \"react\";\n\nclass TotalMessages extends Component {\n\n    render() {\n        return (\n            <div className=\"totalMessages\" id={this.props.hidden}>\n                <div>\n                    <p><span className='date'>{this.props.sendDate}</span></p>\n                    <span className='messageID'>{this.props.userID}</span>\n                    --->\n                    <span className='messageText'>{this.props.userMessage}</span>\n                    <span className='deleteYou' id={this.props.firebaseKey} onClick={this.props.cancelMessage}><span className={this.props.userID} id={this.props.firebaseKey}>x</span></span>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default TotalMessages;\n\n","import React, { Component } from \"react\";\nimport MessageInput from '../formComponents/MessageInput';\nimport TotalMessages from '../formComponents/TotalMessages';\n\nclass PublicChat extends Component {\n\n    render() {\n        return (\n            <div className='page2'>\n                <h1>Chattr<span className='cubed'>3</span></h1>\n                <h2>Chatroom: {this.props.statusChat}</h2>\n\n                <MessageInput userInput={this.props.userInput} trackChanges={this.props.handleChange} submitStore={this.props.handleSubmit} />\n                <div className='messagesBox'>\n                    <div>\n                        {this.props.messageList.map((messageObject) => {\n                            return (\n                        <TotalMessages userID={messageObject.userID} userMessage={messageObject.userMessage} hidden={this.props.hideClassName} sendDate={messageObject.currentTime} cancelMessage={this.props.removeMessage} firebaseKey={messageObject.userFirebaseKey} />\n                            )\n                        }\n                        )}\n                        {/* empty div so we can scroll to the newest message on message send */}\n                        <div className='lastMessage'>..</div>\n\n                    </div>\n                </div>\n                <button className=\"clear\" onClick={this.props.changeHideState}>Hide / UnHide chat </button>\n                <button className=\"clear\" onClick={this.props.removeChat}>Remove Chat Permanently for everyone </button>\n                <button onClick={this.props.goBackToStart}>Go back to sign in page</button>\n            </div>\n        )\n    }\n}\n\nexport default PublicChat;\n","import React, { Component } from \"react\";\n\nclass TextInput extends Component {\n    render() {\n        return (\n            <div className='signInForm'>\n                    <label htmlFor={this.props.className}></label>\n                    <input id={this.props.className} type='text' placeholder={this.props.inputField} className={this.props.className} onChange={this.props.handleChange} />\n            </div>\n            )\n    }\n}\n\nexport default TextInput;\n\n\n","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div className='landingPage'>    \n                <h1>Hi!! Welcome to Chattr<span className='cubed'>3</span></h1>\n                <h3>Lets get started!</h3>\n                <p>Join the public channel as a guest?</p>\n                    <form className='publicRoomInputForm' onSubmit={this.props.publicJoin}>\n                    <p>Your Name</p>\n                    <TextInput inputField='Name' className='publicJoin' handleChange={this.props.handleChange}/>\n                        <button type='submit' className='submitPublic'>Go Public</button>\n                    </form>\n                <p>or {this.props.signOrLogin} to create your own channels</p> \n                    <button onClick={this.props.switchSign}>already have an account</button>\n                    <form className='signInForm' onSubmit={this.props.signUpOrLogin}>\n                        <p>Your Name</p>\n                        <TextInput inputField='Name' className='signInName' handleChange={this.props.handleChange}/>\n                        <p>Your Random Key</p>\n                        <TextInput inputField='Random key' className='signInRandomKey'  handleChange={this.props.handleChange}/>\n                        <button type='submit' className={this.props.signOrLogin}>{this.props.signOrLogin}</button>\n                    </form>\n                    \n                    \n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, { Component } from \"react\";\nimport TextInput from '../formComponents/TextInput';\n\nclass RoomPage extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Hi {this.props.userName}! Your all signed in!</h2>\n                <form className='createRoomInputForm' onSubmit={this.props.createRoom}>\n                    <h3>Create a new chat room</h3>\n                    <TextInput inputField='Name for the new room' className='createRoom' handleChange={this.props.handleChange} />\n                    <button type='submit' className='submitRoom'>Create</button>\n                </form>\n                <form className='joinRoomInputForm' onSubmit={this.props.joinRoom}>\n                    <h3>Join an existing chat room</h3>\n                    <TextInput inputField='Existing room name' className='joinRoom' handleChange={this.props.handleChange} />\n                    <button type='submit' className='submitJoin'>Join</button>\n                </form>\n                \n                <button onClick={this.props.goBackToStart}>or Sign out</button>\n            </div>\n            \n        )\n    }\n}\n\nexport default RoomPage;","import React, { Component } from \"react\";\nimport './App.css';\nimport firebase from './firebase/firebase';\nimport PublicChat from './pages/PublicChat';\nimport LandingPage from './pages/LandingPage';\nimport RoomPage from './pages/RoomPage';\n\n\n\n// TOD\n  /// CHECK THAT IT SCROLLS TO BOTTOM WHEN YOU SET LIVE SITE\n  // use the random id generator for public chat but update the private chats to use the user's ID\n\n// import ThreeContainer from './three.js/ThreeContainer';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'Tom',\n      userPW: '',\n      hideClass: true,\n      hideClassName: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      privateCreate: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n      roomName: 'publicRoom', \n    }\n\n  \n  }\n\n  componentDidMount() {\n    // if (this.state.publicJoin === true) {\n      // this.groupChatStart();\n    // } else {\n    //   return\n    // }\n  }\n\n  // LANDING PAGE FUNCTIONALITY\n\n  switchSign= () => {\n    if (this.state.switchSign === 'Sign up') {\n      this.setState({\n        switchSign: 'Login',\n      })\n    } else {\n      this.setState({\n        switchSign: 'Sign up',\n      })\n    }\n  }\n  \n  signUpOrLogin = (e) => {\n    e.preventDefault();\n    \n    let name = this.state.userInput;\n    let pw = this.state.userInput2;\n    if (this.state.switchSign === 'Sign up') {\n      \n      this.signUp(name, pw)\n    } else if (this.state.switchSign === 'Login') {\n      this.login(name, pw)\n    }      \n  }\n\n  signUp = (name, pw) => {  \n    // pull users area of firebase\n    const users = firebase.database().ref('users');\n    // pull current time \n    const currentTime = Date(Date.now()).toString();\n    // hack needed a setTimeout to deliver the non-default states\n  \n      // create object with details of sign up\n      const userObject = {\n        userID: name,\n        userPW: pw,\n        signUpTime: currentTime,\n      }\n      // check if someone already has both these userID / password\n      users.on('value', (users) => {\n        \n        let usersCleaned = users.val();\n        for (let user in usersCleaned) {\n          \n          if (usersCleaned[user].userID == name && usersCleaned[user].userPW.toString() == pw) {\n            this.setState({\n              stop: true,\n            })\n          }  \n        }\n      })\n      \n      setTimeout(() => { \n        // only run if user has input both text fields\n        if (!pw || !name) {\n          alert('please fill both sign in fields')\n        } \n        // only run it if the stop status set above is set to false\n        else if (this.state.stop === true) {\n          alert('sorry someone already has that key with that user name. Try again.')\n          this.setState({\n            stop: false,\n          })\n        } \n        // error if already signed in \n        else if (this.state.userSignedIn === true) {\n          alert('Already signed in I am afraid')\n        } \n        \n        // push user to database if the two conditionals above are false\n        else {\n            const pushID = users.push(userObject);\n            userObject.userFirebaseKey = pushID.key;\n            users.child(pushID.key).update(userObject);\n            this.setState({\n              userName: name,\n              userPW: pw,\n              userSignedIn: true,\n              userInput: '',\n\n            })\n        }\n      }, 300);\n   \n    \n  } \n\n  login = (name, pw) => {\n    // if already signed in, highlight to user\n    if (this.state.userSignedIn === true) {\n      alert('Already signed in. sign out when you can')\n      return\n    }\n\n    // check login details vs. database\n    const users = firebase.database().ref('users');\n    users.on('value', (users) => {\n\n      let usersCleaned = users.val();\n      let testArray = []\n      for (let user in usersCleaned) {\n\n        if (usersCleaned[user].userID === name && usersCleaned[user].userPW.toString() === pw) {\n          this.setState({\n            userName: name,\n            userPW: pw,\n            userSignedIn: true,\n            userInput: '',\n          })\n          testArray.push('match')\n        } \n      } \n      if (testArray.length === 0) {\n        alert('sorry, no username and ID matches those. Try again')\n      }\n\n    })\n    \n    // if login match, run get started function below\n  }\n\n  adjustPublicJoinStatus = (e) => {\n    e.preventDefault();\n    // already stored their input in userInput for storage on this submit\n    let userName = this.state.userInput;\n\n    // set state to true\n    this.setState({\n      publicJoin: true,\n      userInput: '',\n    })\n    // public app start\n    this.groupChatStart(userName);\n  }\n\n  // 2nd PAGE (PUBLIC CHAT) FUNCTIONALITY\n\n  groupChatStart = (name) => {\n    // ask for user name and store in variable\n    let userNameResponse = name;\n    // if user doesn't give a name, make them\n    // if (userNameResponse === '') {\n    //   userNameResponse = prompt('try again, what is your name?')\n    // }\n\n    //add to the name given by a user a random generated number to ensure people are different\n    const randomUserId = Math.floor(Math.random() * 100);\n    userNameResponse = userNameResponse + randomUserId;\n    // console.log(userNameResponse)\n\n    // if roomName = publiRoom (i.e. the public guest chat), add guest to their name, ID and \n    userNameResponse = this.addGuest(userNameResponse);\n\n   \n\n    // pull firebase\n    const chatrooms = firebase.database().ref('chatrooms');\n    // always listen to firebase database chatrooms. On changes to database, update state\n    chatrooms.on('value', (chatroom) => {\n      const chatrooms = chatroom.val();\n      const currentRoom = this.state.roomName;\n      const chatroomPush = chatrooms[currentRoom];\n      \n      let messageArray = [];\n      for (let message in chatroomPush) {\n        messageArray.push(chatroomPush[message])\n      }\n      // when chatroom changes, push the entire chatroom message to state\n      this.setState({\n        messageList: messageArray,\n        userName: userNameResponse,\n      })\n      let element = document.querySelector('.lastMessage');\n      setTimeout(function () {\n        element.scrollIntoView();\n      }, 100);\n    })\n  }\n\n  addGuest = (name) => {\n    if (this.state.roomName === 'publicRoom') {\n      let guest = ':(guest)';\n      name = name + guest;\n    \n    }\n    console.log(name);\n    return name\n  }\n\n  handleChange = (event) => {\n    // when input text box changes, update state of the userInput dynamically\n\n    // if its the signIn part, update userInput one for usage\n    if (event.target.className === 'signInName') {\n        this.setState({\n        userInput: event.target.value\n        })\n    // if its the key part, update userInput one for usage\n\n    } else if (event.target.className === 'signInRandomKey') {\n        this.setState({\n          userInput2: event.target.value\n        })\n    }   // if its anything else, update userInput one for usage\n    else {\n      this.setState({\n        userInput: event.target.value\n      })\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // set firebase object of chatroom\n    const chatrooms = firebase.database().ref('chatrooms');\n    // pull username and message \n    const enqueuedMessage = this.state.userInput;\n\n    // find latest time / date\n    const currentTime = Date(Date.now()).toString();\n\n    \n    const messageObject = {\n      userID: this.state.userName,\n      userMessage: enqueuedMessage,\n      currentTime: currentTime,\n      userFirebaseKey: '',\n    }\n    // push message object to firebase in the 'current' room with chatroom1 as the default if message isn't empty\n    if (enqueuedMessage) {\n      // store the pushID given to us from firebase\n      const pushID = chatrooms.child(this.state.roomName).push(messageObject);\n      // update the firebase key with variable pushID\n      messageObject.userFirebaseKey = pushID.key;\n      chatrooms.child(this.state.roomName).child(pushID.key).update(messageObject);\n\n      this.setState({\n        userInput: '',\n        currentTime: '',\n        userFirebaseKey: '',\n      })\n    }\n\n    // on submit - scroll to the bottom of the page after a delay (allow message to be appended)\n    // let element = document.querySelector('.lastMessage');\n    // setTimeout(function () { \n    //   element.scrollIntoView(); \n    // }, 100);\n  }\n\n  changeHideState = (event) => {\n    // if hide button clicked, change hideClass to true\n    this.setState({\n      hideClass: !this.state.hideClass,\n    })\n    //run hidechat\n    this.hideChat();\n  }\n\n  hideChat = () => {\n    // if user has clicked the button and hideClass state is true, then add the hideClassName to all the li messages \n    if (this.state.hideClass === true) {\n      this.setState({\n        hideClassName: 'hide',\n      })\n    } \n    // else, remove hideClass name from all li messages \n    else {\n      this.setState({\n        hideClassName: '',\n      })\n    }\n  }\n\n  removeChat = (event) => {\n    const chatrooms = firebase.database().ref('chatrooms');\n    const userCertain = window.confirm('Are you sure you want to delete the chat for all participants?')\n\n    if (userCertain) {\n      chatrooms.child(this.state.roomName).set({\n        0: {\n          userID: \"Chattr Bot\",\n          userMessage: \"Start chat below\"\n        }\n      });\n    } else {\n      return\n    }\n\n  }\n\n  removeMessage = (event) => {\n    // pull the firebase chatroom necessary\n    const chatrooms = firebase.database().ref('chatrooms');\n    // compare current username vs. username held in class on the event clicked on (see total messages span)\n    if (this.state.userName === event.target.className) \n    // if they are the same, then go into database and find the clicked on message's firebase key. In this firebase key area of your database, delete it\n    {\n      chatrooms.child(this.state.roomName).child(event.target.id).remove();  \n    } \n    // else alert the user that they can't delete other people's messages\n    else {\n      alert(`You can only delete your own messages`)\n    }\n  }\n\n  goBackToStart = (e) => {\n    e.preventDefault();\n    this.setState({\n      clicked: false,\n      messageList: [],\n      userInput: '',\n      userInput2: '',\n      userName: 'Tom',\n      userPW: '',\n      hideClass: true,\n      hideClassName: '',\n      currentTime: '',\n      userFirebaseKey: '',\n      publicJoin: false,\n      privateJoin: false,\n      switchSign: 'Sign up',\n      stop: false,\n      userSignedIn: false,\n    })\n  }\n\n    // 3rd PAGE (PUBLIC CHAT) FUNCTIONALITY\n  \n  createRoom = (e) => {\n    e.preventDefault();\n    let roomName = this.state.userInput;\n\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n      \n      for (let chatroom in chatroomsCleaned) {\n\n        if (chatroom.toString() == roomName.toString()) {\n          this.setState({\n            stop: true,\n          })\n        }\n      }\n\n    })\n\n    setTimeout(() => { \n    // only run if user has input both text fields\n    if (roomName === '') {\n      alert('please fill a room name')\n    } \n    // update the roomName to userInput if exists\n    // only run it if the stop status set above is set to false\n      else if (this.state.stop === true) {\n      alert('sorry someone already has that room name. Try again.')\n      this.setState({\n        stop: false,\n      })\n    }\n    \n    else {\n      // remove push as not as clean a database\n      let template = '0';\n      const chatRoomObject = {\n        [roomName]: {\n          [template]: {\n            userID: \"Chattr Bot\",\n            userMessage: \"Start chat below\",\n          }\n        }\n      }\n      chatrooms.update(chatRoomObject);\n      this.setState({\n        roomName: roomName,\n        userInput: '',\n        privateCreate: true,\n      })\n      // run append to page function that takes name as the only parameter\n      let name = this.state.userName;\n      this.groupChatStart(name);\n    }\n    }, 300);\n  }\n\n  joinRoom = (e) => {\n    e.preventDefault();\n\n    let roomName = this.state.userInput;\n    const chatrooms = firebase.database().ref('chatrooms');\n    chatrooms.on('value', (chatrooms) => {\n      let chatroomsCleaned = chatrooms.val();\n      let matchOnce = [];\n      for (let chatroom in chatroomsCleaned) {\n        if (chatroom.toString() == roomName.toString()) {\n          matchOnce.push('match')\n        } else {\n          console.log(matchOnce)\n        }\n      }\n      console.log(matchOnce)\n      if (matchOnce.length > 0) {\n        this.setState({\n          stop: false,\n        })\n      } else {\n        this.setState({\n          stop: true,\n        })\n      }\n      console.log(matchOnce)\n    })\n    setTimeout(() => {\n      console.log(this.state.stop)\n      // only run if user has input both text fields\n      if (roomName === '') {\n        alert('please fill a room name')\n      }\n      // update the roomName to userInput if exists\n      // only run it if the stop status set above is set to false\n      else if (this.state.stop === false) {\n        // alert('sorry there are no room names with that title. Try again.')\n        // this.setState({\n        //   stop: false,\n        // })\n        this.setState({\n          roomName: roomName,\n          userInput: '',\n          privateJoin: true,\n        })\n        let name = this.state.userName\n        this.groupChatStart(name);\n      } else {\n        alert('sorry there are no room names with that title. Try again.')\n        \n      }\n\n      // else {\n      //   // remove push as not as clean a database\n      // }\n    }, 500);\n\n  }\n  \n\n\n  // THREE.JS STRETCH\n  // runThree = () => {\n  //   this.setState({\n  //     clicked: !this.state.clicked,\n  //   });\n  // }\n  render() {\n    return (\n      <div className=\"App\">\n          \n          {\n             this.state.publicJoin \n             ? \n            <PublicChat statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart}/>\n           \n             : \n             (!this.state.userSignedIn \n              ? \n              <LandingPage publicJoin={this.adjustPublicJoinStatus} handleChange={this.handleChange} signUpOrLogin={this.signUpOrLogin} switchSign={this.switchSign} signOrLogin={this.state.switchSign} />\n              :\n              (this.state.privateCreate\n                ?\n                <PublicChat statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart} />\n                :\n                (this.state.privateJoin\n                  ?\n                  <PublicChat statusChat={this.state.roomName} userInput={this.state.userInput} handleChange={this.handleChange} handleSubmit={this.handleSubmit} messageList={this.state.messageList} hideClassName={this.state.hideClassName} removeMessage={this.removeMessage} changeHideState={this.changeHideState} removeChat={this.removeChat} goBackToStart={this.goBackToStart} />\n                  :\n                <RoomPage goBackToStart={this.goBackToStart} handleChange={this.handleChange} createRoom={this.createRoom} joinRoom={this.joinRoom} userName={this.state.userName}/>\n                )\n              \n              \n              )\n             )\n          }        \n        {/* {\n          // THREE.JS STRETCH\n          this.state.clicked \n              ? <ThreeContainer />\n              : null\n        } */}\n      </div>\n\n    )\n  }\n  }\n\nexport default App;\n\n\n// THREE JS STRETCH\n// combined three js with react by following this guide - https://blog.bitsrc.io/starting-with-react-16-and-three-js-in-5-minutes-3079b8829817\n\n// split three.js into multiple files with guide - https://medium.com/javascript-in-plain-english/javascript-in-3d-an-introduction-to-three-js-780f1e4a2e6d\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}